{"version":3,"sources":["src/scripts/browserStorage.ts","src/index.ts"],"names":[],"mappings":";;;;;ACAA,IAAA,gBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,ADDA,ICCM,cAAc,GAAoB,IAAI,gBAAA,CAAA,cAAc,CAAC,cAAc,CAAC;AAE1E,ADFA,cCEc,CAAC,OAAO,CAAC,OAAO,EAAC,QAAQ,CAAC;AAGxC,ADHA,IAAA,GCGO,CAAC,GAAG,CAAC,MDHZ,GAAA,UCG+B,CAAC,EDHhC,YAAA;ACKA,EDFI,ECEE,MAAM,CDFR,ECE0B,YDF1B,CAAY,CCE4B,CAAC,OAAO,CAAC,CDFI,EAAA,ICEG,CAAC;AAE7D,IDJgB,GCIT,CAAC,ADJQ,GCIL,CAAC,MAAM,CAAC,ADJH,KAAA,KAAA,CAAA,EAAA;ACMhB,IAAM,EDNU,KCMH,GAAG,GDNA,GAAA,ECMQ,CAAC,WDNgC,GCMlB,CAAC,OAAO,CAAC;AAEhD,IAAG,ADRsD,OCQ/C,IAAI,MAAM,EAAC;EACjB,EDRI,IAAI,CCQD,CAAC,SDRW,ECQA,GAAG,ADRE,MCQI,QDRU,IAAI,WAAW,KAAK,gBAAgB,EAAE;ACShF,MDRY,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC;IACpF;IACA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;EACtC;EAEA,cAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAW,GAAW,EAAE,KAAQ,EAAA;IAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;EACpD,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAW,GAAW,EAAA;IAClB,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;IAC7C,IAAI,CAAC,WAAW,EAAE;MACd,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAM;EACvC,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,GAAW,EAAA;IAClB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC;EAChC,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,GAAW,EAAA;IACf,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI;EAC7C,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAA,CAAE;EACxB,CAAC;EACL,OAAA,cAAC;AAAD,CAjCA,CAAA,CAAA;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["type StorageType = 'localStorage' | 'sessionStorage';\r\n// sessionStorage - no data persistence\r\n// localStorage - with data persistence\r\n\r\nexport class BrowserStorage {\r\n    private readonly storage: Storage;\r\n\r\n    constructor(storageType: StorageType = 'localStorage') {\r\n        if (storageType !== 'localStorage' && storageType !== 'sessionStorage') {\r\n            throw new Error('Invalid storage type. Use \"localStorage\" or \"sessionStorage\".');\r\n        }\r\n        this.storage = window[storageType];\r\n    }\r\n\r\n    setItem<T>(key: string, value: T): void {\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    getItem<T>(key: string): T | null {\r\n        const storedValue = this.storage.getItem(key);\r\n        if (!storedValue) {\r\n            return null;\r\n        }\r\n        return JSON.parse(storedValue) as T;\r\n    }\r\n\r\n    removeItem(key: string): void {\r\n        this.storage.removeItem(key);\r\n    }\r\n\r\n    hasItem(key: string): boolean {\r\n        return this.storage.getItem(key) !== null;\r\n    }\r\n\r\n    clear(): void {\r\n        this.storage.clear();\r\n    }\r\n}\r\n","import { BrowserStorage } from \"./scripts/browserStorage\";\r\n\r\nconst storageManager : BrowserStorage = new BrowserStorage('localStorage');\r\n\r\nstorageManager.setItem(\"theme\",\"vulcan\");\r\n\r\n\r\nconsole.log(\"Hello, TypeScript\");\r\n\r\nconst result: string | null = storageManager.getItem(\"theme\");\r\n\r\nconsole.log(result);\r\n\r\nconst element = document.getElementById(\"theme\");\r\n\r\nif(element && result){\r\n    element.textContent = result;\r\n}\r\n"]}